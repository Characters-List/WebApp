/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiV1CharactersGet$Json } from '../fn/characters/api-v-1-characters-get-json';
import { ApiV1CharactersGet$Json$Params } from '../fn/characters/api-v-1-characters-get-json';
import { apiV1CharactersGet$Plain } from '../fn/characters/api-v-1-characters-get-plain';
import { ApiV1CharactersGet$Plain$Params } from '../fn/characters/api-v-1-characters-get-plain';
import { apiV1CharactersIdDelete } from '../fn/characters/api-v-1-characters-id-delete';
import { ApiV1CharactersIdDelete$Params } from '../fn/characters/api-v-1-characters-id-delete';
import { apiV1CharactersIdGet$Json } from '../fn/characters/api-v-1-characters-id-get-json';
import { ApiV1CharactersIdGet$Json$Params } from '../fn/characters/api-v-1-characters-id-get-json';
import { apiV1CharactersIdGet$Plain } from '../fn/characters/api-v-1-characters-id-get-plain';
import { ApiV1CharactersIdGet$Plain$Params } from '../fn/characters/api-v-1-characters-id-get-plain';
import { apiV1CharactersIdPut } from '../fn/characters/api-v-1-characters-id-put';
import { ApiV1CharactersIdPut$Params } from '../fn/characters/api-v-1-characters-id-put';
import { apiV1CharactersPost } from '../fn/characters/api-v-1-characters-post';
import { ApiV1CharactersPost$Params } from '../fn/characters/api-v-1-characters-post';
import { CharacterDto } from '../models/character-dto';

@Injectable({ providedIn: 'root' })
export class CharactersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiV1CharactersGet()` */
  static readonly ApiV1CharactersGetPath = '/api/v1/Characters';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1CharactersGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharactersGet$Plain$Response(params?: ApiV1CharactersGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CharacterDto>>> {
    return apiV1CharactersGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1CharactersGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharactersGet$Plain(params?: ApiV1CharactersGet$Plain$Params, context?: HttpContext): Observable<Array<CharacterDto>> {
    return this.apiV1CharactersGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CharacterDto>>): Array<CharacterDto> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1CharactersGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharactersGet$Json$Response(params?: ApiV1CharactersGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CharacterDto>>> {
    return apiV1CharactersGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1CharactersGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharactersGet$Json(params?: ApiV1CharactersGet$Json$Params, context?: HttpContext): Observable<Array<CharacterDto>> {
    return this.apiV1CharactersGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CharacterDto>>): Array<CharacterDto> => r.body)
    );
  }

  /** Path part for operation `apiV1CharactersPost()` */
  static readonly ApiV1CharactersPostPath = '/api/v1/Characters';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1CharactersPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiV1CharactersPost$Response(params: ApiV1CharactersPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiV1CharactersPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1CharactersPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiV1CharactersPost(params: ApiV1CharactersPost$Params, context?: HttpContext): Observable<void> {
    return this.apiV1CharactersPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiV1CharactersIdGet()` */
  static readonly ApiV1CharactersIdGetPath = '/api/v1/Characters/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1CharactersIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharactersIdGet$Plain$Response(params: ApiV1CharactersIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<CharacterDto>> {
    return apiV1CharactersIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1CharactersIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharactersIdGet$Plain(params: ApiV1CharactersIdGet$Plain$Params, context?: HttpContext): Observable<CharacterDto> {
    return this.apiV1CharactersIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<CharacterDto>): CharacterDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1CharactersIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharactersIdGet$Json$Response(params: ApiV1CharactersIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CharacterDto>> {
    return apiV1CharactersIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1CharactersIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharactersIdGet$Json(params: ApiV1CharactersIdGet$Json$Params, context?: HttpContext): Observable<CharacterDto> {
    return this.apiV1CharactersIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CharacterDto>): CharacterDto => r.body)
    );
  }

  /** Path part for operation `apiV1CharactersIdPut()` */
  static readonly ApiV1CharactersIdPutPath = '/api/v1/Characters/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1CharactersIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiV1CharactersIdPut$Response(params: ApiV1CharactersIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiV1CharactersIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1CharactersIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiV1CharactersIdPut(params: ApiV1CharactersIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiV1CharactersIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiV1CharactersIdDelete()` */
  static readonly ApiV1CharactersIdDeletePath = '/api/v1/Characters/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1CharactersIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharactersIdDelete$Response(params: ApiV1CharactersIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiV1CharactersIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1CharactersIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharactersIdDelete(params: ApiV1CharactersIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiV1CharactersIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
