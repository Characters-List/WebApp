/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiV1CharacterClassesGet$Json } from '../fn/character-classes/api-v-1-character-classes-get-json';
import { ApiV1CharacterClassesGet$Json$Params } from '../fn/character-classes/api-v-1-character-classes-get-json';
import { apiV1CharacterClassesGet$Plain } from '../fn/character-classes/api-v-1-character-classes-get-plain';
import { ApiV1CharacterClassesGet$Plain$Params } from '../fn/character-classes/api-v-1-character-classes-get-plain';
import { apiV1CharacterClassesIdCharactersGet$Json } from '../fn/character-classes/api-v-1-character-classes-id-characters-get-json';
import { ApiV1CharacterClassesIdCharactersGet$Json$Params } from '../fn/character-classes/api-v-1-character-classes-id-characters-get-json';
import { apiV1CharacterClassesIdCharactersGet$Plain } from '../fn/character-classes/api-v-1-character-classes-id-characters-get-plain';
import { ApiV1CharacterClassesIdCharactersGet$Plain$Params } from '../fn/character-classes/api-v-1-character-classes-id-characters-get-plain';
import { apiV1CharacterClassesIdDelete } from '../fn/character-classes/api-v-1-character-classes-id-delete';
import { ApiV1CharacterClassesIdDelete$Params } from '../fn/character-classes/api-v-1-character-classes-id-delete';
import { apiV1CharacterClassesIdGet$Json } from '../fn/character-classes/api-v-1-character-classes-id-get-json';
import { ApiV1CharacterClassesIdGet$Json$Params } from '../fn/character-classes/api-v-1-character-classes-id-get-json';
import { apiV1CharacterClassesIdGet$Plain } from '../fn/character-classes/api-v-1-character-classes-id-get-plain';
import { ApiV1CharacterClassesIdGet$Plain$Params } from '../fn/character-classes/api-v-1-character-classes-id-get-plain';
import { apiV1CharacterClassesIdPut } from '../fn/character-classes/api-v-1-character-classes-id-put';
import { ApiV1CharacterClassesIdPut$Params } from '../fn/character-classes/api-v-1-character-classes-id-put';
import { apiV1CharacterClassesPost } from '../fn/character-classes/api-v-1-character-classes-post';
import { ApiV1CharacterClassesPost$Params } from '../fn/character-classes/api-v-1-character-classes-post';
import { CharacterClassDto } from '../models/character-class-dto';
import { CharacterDto } from '../models/character-dto';

@Injectable({ providedIn: 'root' })
export class CharacterClassesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiV1CharacterClassesGet()` */
  static readonly ApiV1CharacterClassesGetPath = '/api/v1/CharacterClasses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1CharacterClassesGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharacterClassesGet$Plain$Response(params?: ApiV1CharacterClassesGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CharacterClassDto>>> {
    return apiV1CharacterClassesGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1CharacterClassesGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharacterClassesGet$Plain(params?: ApiV1CharacterClassesGet$Plain$Params, context?: HttpContext): Observable<Array<CharacterClassDto>> {
    return this.apiV1CharacterClassesGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CharacterClassDto>>): Array<CharacterClassDto> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1CharacterClassesGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharacterClassesGet$Json$Response(params?: ApiV1CharacterClassesGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CharacterClassDto>>> {
    return apiV1CharacterClassesGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1CharacterClassesGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharacterClassesGet$Json(params?: ApiV1CharacterClassesGet$Json$Params, context?: HttpContext): Observable<Array<CharacterClassDto>> {
    return this.apiV1CharacterClassesGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CharacterClassDto>>): Array<CharacterClassDto> => r.body)
    );
  }

  /** Path part for operation `apiV1CharacterClassesPost()` */
  static readonly ApiV1CharacterClassesPostPath = '/api/v1/CharacterClasses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1CharacterClassesPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiV1CharacterClassesPost$Response(params: ApiV1CharacterClassesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiV1CharacterClassesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1CharacterClassesPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiV1CharacterClassesPost(params: ApiV1CharacterClassesPost$Params, context?: HttpContext): Observable<void> {
    return this.apiV1CharacterClassesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiV1CharacterClassesIdGet()` */
  static readonly ApiV1CharacterClassesIdGetPath = '/api/v1/CharacterClasses/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1CharacterClassesIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharacterClassesIdGet$Plain$Response(params: ApiV1CharacterClassesIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<CharacterClassDto>> {
    return apiV1CharacterClassesIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1CharacterClassesIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharacterClassesIdGet$Plain(params: ApiV1CharacterClassesIdGet$Plain$Params, context?: HttpContext): Observable<CharacterClassDto> {
    return this.apiV1CharacterClassesIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<CharacterClassDto>): CharacterClassDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1CharacterClassesIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharacterClassesIdGet$Json$Response(params: ApiV1CharacterClassesIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CharacterClassDto>> {
    return apiV1CharacterClassesIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1CharacterClassesIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharacterClassesIdGet$Json(params: ApiV1CharacterClassesIdGet$Json$Params, context?: HttpContext): Observable<CharacterClassDto> {
    return this.apiV1CharacterClassesIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CharacterClassDto>): CharacterClassDto => r.body)
    );
  }

  /** Path part for operation `apiV1CharacterClassesIdPut()` */
  static readonly ApiV1CharacterClassesIdPutPath = '/api/v1/CharacterClasses/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1CharacterClassesIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiV1CharacterClassesIdPut$Response(params: ApiV1CharacterClassesIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiV1CharacterClassesIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1CharacterClassesIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiV1CharacterClassesIdPut(params: ApiV1CharacterClassesIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiV1CharacterClassesIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiV1CharacterClassesIdDelete()` */
  static readonly ApiV1CharacterClassesIdDeletePath = '/api/v1/CharacterClasses/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1CharacterClassesIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharacterClassesIdDelete$Response(params: ApiV1CharacterClassesIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiV1CharacterClassesIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1CharacterClassesIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharacterClassesIdDelete(params: ApiV1CharacterClassesIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiV1CharacterClassesIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiV1CharacterClassesIdCharactersGet()` */
  static readonly ApiV1CharacterClassesIdCharactersGetPath = '/api/v1/CharacterClasses/{id}/Characters';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1CharacterClassesIdCharactersGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharacterClassesIdCharactersGet$Plain$Response(params: ApiV1CharacterClassesIdCharactersGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CharacterDto>>> {
    return apiV1CharacterClassesIdCharactersGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1CharacterClassesIdCharactersGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharacterClassesIdCharactersGet$Plain(params: ApiV1CharacterClassesIdCharactersGet$Plain$Params, context?: HttpContext): Observable<Array<CharacterDto>> {
    return this.apiV1CharacterClassesIdCharactersGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CharacterDto>>): Array<CharacterDto> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1CharacterClassesIdCharactersGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharacterClassesIdCharactersGet$Json$Response(params: ApiV1CharacterClassesIdCharactersGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CharacterDto>>> {
    return apiV1CharacterClassesIdCharactersGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1CharacterClassesIdCharactersGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1CharacterClassesIdCharactersGet$Json(params: ApiV1CharacterClassesIdCharactersGet$Json$Params, context?: HttpContext): Observable<Array<CharacterDto>> {
    return this.apiV1CharacterClassesIdCharactersGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CharacterDto>>): Array<CharacterDto> => r.body)
    );
  }

}
